// <auto-generated />
using System;
using EcoStepBackend;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcoStepBackend.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250418001120_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.4");

            modelBuilder.Entity("EcoStepBackend.FoodData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("MeatEatenKg")
                        .HasColumnType("REAL");

                    b.Property<double>("PlantEatenKg")
                        .HasColumnType("REAL");

                    b.Property<int>("SurveyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId")
                        .IsUnique();

                    b.ToTable("FoodData");
                });

            modelBuilder.Entity("EcoStepBackend.Household", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("HeatingType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("HouseType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ResidentCount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Household");
                });

            modelBuilder.Entity("EcoStepBackend.ResourceData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("ElectricityConsumptionKWtH")
                        .HasColumnType("REAL");

                    b.Property<int>("SurveyId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("WaterConsumptionL")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId")
                        .IsUnique();

                    b.ToTable("ResourceData");
                });

            modelBuilder.Entity("EcoStepBackend.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("ReportedDays")
                        .HasColumnType("REAL");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("EcoStepBackend.TransportData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("AirplaneDistanceKm")
                        .HasColumnType("REAL");

                    b.Property<double>("CarDistanceKmDiesel")
                        .HasColumnType("REAL");

                    b.Property<double>("CarDistanceKmElectric")
                        .HasColumnType("REAL");

                    b.Property<double>("CarDistanceKmHybrid")
                        .HasColumnType("REAL");

                    b.Property<double>("CarDistanceKmHydrogen")
                        .HasColumnType("REAL");

                    b.Property<double>("CarDistanceKmMethane")
                        .HasColumnType("REAL");

                    b.Property<double>("CarDistanceKmPetrol")
                        .HasColumnType("REAL");

                    b.Property<double>("CarDistanceKmPropane")
                        .HasColumnType("REAL");

                    b.Property<double>("PublicTransportDistanceKm")
                        .HasColumnType("REAL");

                    b.Property<int>("SurveyId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TrainDistanceKm")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId")
                        .IsUnique();

                    b.ToTable("TransportData");
                });

            modelBuilder.Entity("EcoStepBackend.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsAirplaneOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCarDieselOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCarElectricOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCarHybridOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCarHydrogenOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCarMethaneOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCarPetrolOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsCarPropaneOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsElectricityOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFoodMeatOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFoodPlantOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsFoodWasteOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGlassRecycledOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsGlassWasteOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMetalRecycledOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsMetalWasteOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsOtherWasteOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPaperRecycledOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPaperWasteOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPlasticRecycledOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPlasticWasteOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsPublicTransportOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsTrainOk")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsWaterOk")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("EcoStepBackend.WasteData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("FoodWasteKg")
                        .HasColumnType("REAL");

                    b.Property<double>("GlassRecycledPercent")
                        .HasColumnType("REAL");

                    b.Property<double>("GlassWasteKg")
                        .HasColumnType("REAL");

                    b.Property<double>("MetalRecycledPercent")
                        .HasColumnType("REAL");

                    b.Property<double>("MetalWasteKg")
                        .HasColumnType("REAL");

                    b.Property<double>("OtherWasteKg")
                        .HasColumnType("REAL");

                    b.Property<double>("PaperRecycledPercent")
                        .HasColumnType("REAL");

                    b.Property<double>("PaperWasteKg")
                        .HasColumnType("REAL");

                    b.Property<double>("PlasticRecycledPercent")
                        .HasColumnType("REAL");

                    b.Property<double>("PlasticWasteKg")
                        .HasColumnType("REAL");

                    b.Property<int>("SurveyId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId")
                        .IsUnique();

                    b.ToTable("WasteData");
                });

            modelBuilder.Entity("EcoStepBackend.FoodData", b =>
                {
                    b.HasOne("EcoStepBackend.Survey", null)
                        .WithOne("FoodData")
                        .HasForeignKey("EcoStepBackend.FoodData", "SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcoStepBackend.Household", b =>
                {
                    b.HasOne("EcoStepBackend.User", null)
                        .WithOne("Household")
                        .HasForeignKey("EcoStepBackend.Household", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcoStepBackend.ResourceData", b =>
                {
                    b.HasOne("EcoStepBackend.Survey", null)
                        .WithOne("ResourceData")
                        .HasForeignKey("EcoStepBackend.ResourceData", "SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcoStepBackend.Survey", b =>
                {
                    b.HasOne("EcoStepBackend.User", null)
                        .WithMany("Surveys")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcoStepBackend.TransportData", b =>
                {
                    b.HasOne("EcoStepBackend.Survey", null)
                        .WithOne("TransportData")
                        .HasForeignKey("EcoStepBackend.TransportData", "SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcoStepBackend.WasteData", b =>
                {
                    b.HasOne("EcoStepBackend.Survey", null)
                        .WithOne("WasteData")
                        .HasForeignKey("EcoStepBackend.WasteData", "SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EcoStepBackend.Survey", b =>
                {
                    b.Navigation("FoodData")
                        .IsRequired();

                    b.Navigation("ResourceData")
                        .IsRequired();

                    b.Navigation("TransportData")
                        .IsRequired();

                    b.Navigation("WasteData")
                        .IsRequired();
                });

            modelBuilder.Entity("EcoStepBackend.User", b =>
                {
                    b.Navigation("Household");

                    b.Navigation("Surveys");
                });
#pragma warning restore 612, 618
        }
    }
}
